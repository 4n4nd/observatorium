apiVersion: v1
kind: Template
metadata:
  name: jaeger
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/name: jaeger-all-in-one
    name: jaeger-all-in-one
    namespace: ${NAMESPACE}
  spec:
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/name: jaeger-all-in-one
    template:
      metadata:
        labels:
          app.kubernetes.io/name: jaeger-all-in-one
      spec:
        containers:
        - args:
          - --badger.directory-key=/var/jaeger/store/keys
          - --badger.directory-value=/var/jaeger/store/values
          - --badger.ephemeral=false
          - --collector.queue-size=4000
          env:
          - name: SPAN_STORAGE_TYPE
            value: badger
          image: ${IMAGE}:${IMAGE_TAG}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: "14269"
              scheme: HTTP
          name: jaeger-all-in-one
          ports:
          - containerPort: 14250
            name: grpc
          - containerPort: 14269
            name: admin-http
          - containerPort: 16686
            name: query
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: "14269"
              scheme: HTTP
          resources:
            limits:
              cpu: "4"
              memory: 2Gi
            requests:
              cpu: "1"
              memory: 256Mi
          volumeMounts:
          - mountPath: /var/jaeger/store
            name: jaeger-store-data
            readOnly: false
        - args:
          - -provider=openshift
          - -https-address=:16687
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:16686
          - -openshift-service-account=prometheus-telemeter
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}",
            "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
            "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${PROXY_IMAGE}:${PROXY_IMAGE_TAG}
          name: proxy
          ports:
          - containerPort: 16687
            name: https
          volumeMounts:
          - mountPath: /etc/tls/private
            name: secret-jaeger-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: secret-jaeger-proxy
            readOnly: false
        serviceAccount: prometheus-telemeter
        serviceAccountName: prometheus-telemeter
        volumes:
        - name: jaeger-store-data
          persistentVolumeClaim:
            claimName: jaeger-store-data
        - name: secret-jaeger-tls
          secret:
            secretName: jaeger-tls
        - name: secret-jaeger-proxy
          secret:
            secretName: jaeger-proxy
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/name: jaeger-all-in-one
    name: jaeger-collector-headless
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 14250
      targetPort: 14250
    selector:
      app.kubernetes.io/name: jaeger-all-in-one
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: jaeger-tls
    labels:
      app.kubernetes.io/name: jaeger-all-in-one
    name: jaeger-query
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: query
      port: 16686
      targetPort: 16686
    - name: https
      port: 16687
      targetPort: 16687
    selector:
      app.kubernetes.io/name: jaeger-all-in-one
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app.kubernetes.io/name: jaeger-all-in-one
    name: jaeger-store-data
    namespace: ${NAMESPACE}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 50Gi
    storageClassName: standard
parameters:
- name: NAMESPACE
  value: telemeter
- name: IMAGE
  value: jaegertracing/all-in-one
- name: IMAGE_TAG
  value: 1.14.0
- name: REPLICAS
  value: 1
- name: PROXY_IMAGE
  value: openshift/oauth-proxy
- name: PROXY_IMAGE_TAG
  value: v1.1.0
